import{getReflectMetadata as t,updateReflectMetadata as e}from"@inversifyjs/reflect-metadata-utils";import{LazyServiceIdentifier as n}from"@inversifyjs/common";const a="named",r="name",i="unmanaged",o="optional",s="inject",c="multi_inject",u="post_construct",d="pre_destroy";const m=[s,c,r,i,a,o],l=Symbol.for("@inversifyjs/core/InversifyCoreError");class f extends Error{[l];kind;constructor(t,e,n){super(e,n),this[l]=!0,this.kind=t}static is(t){return"object"==typeof t&&null!==t&&!0===t[l]}static isErrorOfKind(t,e){return f.is(t)&&t.kind===e}}var g,p;function h(t,e){const n=[];for(let t=0;t<e.length;++t){void 0===e[t]&&n.push(t)}if(n.length>0)throw new f(g.missingInjectionDecorator,`Found unexpected missing metadata on type "${t.name}" at constructor indexes "${n.join('", "')}".\n\nAre you using @inject, @multiInject or @unmanaged decorators at those indexes?\n\nIf you're using typescript and want to rely on auto injection, set "emitDecoratorMetadata" compiler option to true`)}function y(t){return{kind:p.singleInjection,name:void 0,optional:!1,tags:new Map,targetName:void 0,value:t}}function v(t){const e=t.find((t=>t.key===s)),n=t.find((t=>t.key===c));if(void 0!==t.find((t=>t.key===i)))return function(t,e){if(void 0!==e||void 0!==t)throw new f(g.missingInjectionDecorator,"Expected a single @inject, @multiInject or @unmanaged metadata");return{kind:p.unmanaged}}(e,n);if(void 0===n&&void 0===e)throw new f(g.missingInjectionDecorator,"Expected @inject, @multiInject or @unmanaged metadata");const u=t.find((t=>t.key===a)),d=t.find((t=>t.key===o)),l=t.find((t=>t.key===r));return{kind:void 0===e?p.multipleInjection:p.singleInjection,name:u?.value,optional:void 0!==d,tags:new Map(t.filter((t=>m.every((e=>t.key!==e)))).map((t=>[t.key,t.value]))),targetName:l?.value,value:void 0===e?n?.value:e.value}}function j(t,e,n){try{return v(n)}catch(n){throw f.isErrorOfKind(n,g.missingInjectionDecorator)?new f(g.missingInjectionDecorator,`Expected a single @inject, @multiInject or @unmanaged decorator at type "${t.name}" at constructor arguments at index "${e.toString()}"`,{cause:n}):n}}function k(e){const n=t(e,"design:paramtypes"),a=t(e,"inversify:tagged"),r=[];if(void 0!==a)for(const[t,n]of Object.entries(a)){const a=parseInt(t);r[a]=j(e,a,n)}if(void 0!==n)for(let t=0;t<n.length;++t)if(void 0===r[t]){const e=n[t];r[t]=y(e)}return h(e,r),r}function I(t,e,n){try{return v(n)}catch(n){throw f.isErrorOfKind(n,g.missingInjectionDecorator)?new f(g.missingInjectionDecorator,`Expected a single @inject, @multiInject or @unmanaged decorator at type "${t.name}" at property "${e.toString()}"`,{cause:n}):n}}function w(e){const n=t(e,"inversify:tagged_props"),a=new Map;if(void 0!==n)for(const t of Reflect.ownKeys(n)){const r=n[t];a.set(t,I(e,t,r))}return a}function M(e){const n=t(e,u),a=t(e,d);return{constructorArguments:k(e),lifecycle:{postConstructMethodName:n?.value,preDestroyMethodName:a?.value},properties:w(e)}}function N(t,e){const n=e.getConstructorMetadata(t),a=[];for(const[e,r]of Object.entries(n.userGeneratedMetadata)){const n=parseInt(e);a[n]=j(t,n,r)}if(void 0!==n.compilerGeneratedMetadata)for(let t=0;t<n.compilerGeneratedMetadata.length;++t)if(void 0===a[t]){const e=n.compilerGeneratedMetadata[t];a[t]=y(e)}return h(t,a),a}function E(t,e){const n=e.getPropertiesMetadata(t),a=new Map;for(const e of Reflect.ownKeys(n)){const r=n[e];a.set(e,I(t,e,r))}return a}function D(e,n){const a=t(e,u),r=t(e,d);return{constructorArguments:N(e,n),lifecycle:{postConstructMethodName:a?.value,preDestroyMethodName:r?.value},properties:E(e,n)}}function b(t){const e=Object.getPrototypeOf(t.prototype),n=e?.constructor;return n}function O(t){return t.kind===p.unmanaged?[{key:i,value:!0}]:function(t){const e=[A(t)];void 0!==t.name&&e.push({key:a,value:t.name});t.optional&&e.push({key:o,value:!0});for(const[n,a]of t.tags)e.push({key:n,value:a});void 0!==t.targetName&&e.push({key:r,value:t.targetName});return e}(t)}function A(t){let e;switch(t.kind){case p.multipleInjection:e={key:c,value:t.value};break;case p.singleInjection:e={key:s,value:t.value}}return e}!function(t){t[t.injectionDecoratorConflict=0]="injectionDecoratorConflict",t[t.missingInjectionDecorator=1]="missingInjectionDecorator",t[t.planning=2]="planning",t[t.unknown=3]="unknown"}(g||(g={})),function(t){t[t.multipleInjection=0]="multipleInjection",t[t.singleInjection=1]="singleInjection",t[t.unmanaged=2]="unmanaged"}(p||(p={}));class x{#t;constructor(t){this.#t=t}startsWith(t){return this.#t.startsWith(t)}endsWith(t){return this.#t.endsWith(t)}contains(t){return this.#t.includes(t)}equals(t){return this.#t===t}value(){return this.#t}}const C="@inversifyjs/core/targetId";class T{#e;#n;#a;#r;#i;#o;constructor(n,a,r){this.#n=function(){const n=t(Object,C)??0;return n===Number.MAX_SAFE_INTEGER?e(Object,C,n,(()=>Number.MIN_SAFE_INTEGER)):e(Object,C,n,(t=>t+1)),n}(),this.#a=n,this.#r=void 0,this.#e=a,this.#i=new x("string"==typeof n?n:n.toString().slice(7,-1)),this.#o=r}get id(){return this.#n}get identifier(){return this.#a}get metadata(){return void 0===this.#r&&(this.#r=O(this.#e)),this.#r}get name(){return this.#i}get type(){return this.#o}get serviceIdentifier(){return n.is(this.#e.value)?this.#e.value.unwrap():this.#e.value}getCustomTags(){return[...this.#e.tags.entries()].map((([t,e])=>({key:t,value:e})))}getNamedTag(){return void 0===this.#e.name?null:{key:a,value:this.#e.name}}hasTag(t){return this.metadata.some((e=>e.key===t))}isArray(){return this.#e.kind===p.multipleInjection}isNamed(){return void 0!==this.#e.name}isOptional(){return this.#e.optional}isTagged(){return this.#e.tags.size>0}matchesArray(t){return this.isArray()&&this.#e.value===t}matchesNamedTag(t){return this.#e.name===t}matchesTag(t){return e=>this.metadata.some((n=>n.key===t&&n.value===e))}}const _=t=>function(t,e){return function(n){const a=t(n);let r=b(n);for(;void 0!==r&&r!==Object;){const t=e(r);for(const[e,n]of t)a.properties.has(e)||a.properties.set(e,n);r=b(r)}const i=[];for(const t of a.constructorArguments)if(t.kind!==p.unmanaged){const e=t.targetName??"";i.push(new T(e,t,"ConstructorArgument"))}for(const[t,e]of a.properties)if(e.kind!==p.unmanaged){const n=e.targetName??t;i.push(new T(n,e,"ClassProperty"))}return i}}(void 0===t?M:e=>D(e,t),void 0===t?w:e=>E(e,t));export{p as ClassElementMetadataKind,T as LegacyTargetImpl,v as getClassElementMetadataFromLegacyMetadata,M as getClassMetadata,D as getClassMetadataFromMetadataReader,_ as getTargets};
//# sourceMappingURL=index.js.map
